import { contributionService } from './contributionService';

interface WhatsAppReport {
  totalAmount: number;
  totalContributions: number;
  activeMembers: number;
  failedParsed: number;
  date: string;
}

class WhatsAppService {
  private accessToken: string = '';
  private phoneNumberId: string = '';
  private groupId: string = '';

  async configure(config: { accessToken: string; phoneNumberId: string; groupId: string }): Promise<void> {
    this.accessToken = config.accessToken;
    this.phoneNumberId = config.phoneNumberId;
    this.groupId = config.groupId;
  }

  async generateDailyReport(): Promise<WhatsAppReport> {
    try {
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);

      const contributions = await contributionService.getContributionsByDateRange(today, tomorrow);
      const totalAmount = contributions.reduce((sum, c) => sum + c.amount, 0);
      const uniqueMembers = new Set(contributions.map(c => c.memberId)).size;
      const failedParsed = contributions.filter(c => c.parseStatus === 'failed').length;

      return {
        totalAmount,
        totalContributions: contributions.length,
        activeMembers: uniqueMembers,
        failedParsed,
        date: today.toISOString(),
      };
    } catch (error) {
      console.error('Error generating daily report:', error);
      throw error;
    }
  }

  async sendReport(report: WhatsAppReport): Promise<void> {
    try {
      const message = this.formatReportMessage(report);
      await this.sendMessage(message);
    } catch (error) {
      console.error('Error sending WhatsApp report:', error);
      throw error;
    }
  }

  private formatReportMessage(report: WhatsAppReport): string {
    const formatCurrency = (amount: number) => {
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
      }).format(amount);
    };

    const date = new Date(report.date).toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });

    return `üìä *TRUEFAM Daily Report*
üìÖ ${date}

üí∞ *Total Amount:* ${formatCurrency(report.totalAmount)}
üìà *Contributions:* ${report.totalContributions}
üë• *Active Members:* ${report.activeMembers}
${report.failedParsed > 0 ? `‚ö†Ô∏è *Failed Parsing:* ${report.failedParsed}` : '‚úÖ All contributions parsed successfully'}

üîó *View Sheet:* bit.ly/truefam-sheet

_Generated by TRUEFAM Tracker_`;
  }

  private async sendMessage(message: string): Promise<void> {
    try {
      // Mock WhatsApp API call
      // In real implementation, use WhatsApp Business API or Twilio
      console.log('Sending WhatsApp message:', message);
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      console.log('WhatsApp message sent successfully');
    } catch (error) {
      console.error('Error sending WhatsApp message:', error);
      throw error;
    }
  }

  async sendAlert(message: string): Promise<void> {
    try {
      await this.sendMessage(`üö® *TRUEFAM Alert*\n\n${message}`);
    } catch (error) {
      console.error('Error sending WhatsApp alert:', error);
      throw error;
    }
  }

  async testConnection(): Promise<void> {
    try {
      await this.sendMessage('üß™ *Test Message*\n\nThis is a test message from TRUEFAM Tracker to verify the connection.');
    } catch (error) {
      throw new Error('WhatsApp connection test failed');
    }
  }
}

export const whatsappService = new WhatsAppService();